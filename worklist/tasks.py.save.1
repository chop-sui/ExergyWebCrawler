from celery import shared_task
import requests
from bs4 import BeautifulSoup as bs
from .models import LoginInfo, PowerData
import os
import django

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "ExergyPowerManager.settings")

django.setup()

header = {
    'Referer': 'https://pccs.kepco.co.kr/iSmart/jsp/cm/login/main.jsp',
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36'
}

LOGIN_INFO = {
    'userId': '1316119276',
    'password': '0000003'
}

# class CallbackTask(celery.Task):
#     def on_success(self, retval, task_id, args, kwargs):




# celery -A ExergyPowerManager worker -l info (Command call for celery server)
@shared_task
def scraping(crawl_num, start_year, end_year, start_month, end_month, start_day, end_day):
    with requests.Session() as s:
        base_URL = 'https://pccs.kepco.co.kr'
        res = s.get(base_URL)
        soup = bs(res.content, 'html.parser')
        target_URL = soup.find('frame').get('src')
        target_URL = base_URL + target_URL

        login_req = s.post(base_URL + '/iSmart/cm/login.do', headers=header, data=LOGIN_INFO)

	


        while start_year != end_year or start_month != end_month or start_day != end_day + 1:  # iterate usage_page
            
            if start_month in [1, 3, 5, 7, 8, 10]:
                if start_day > 31:
                    start_month += 1
                    start_day = 1

            elif start_month in [4, 6, 9, 11]:
                if start_day > 30:
                    start_month += 1
                    start_day = 1

            elif start_month == 2:
                if (start_year % 4 == 0 and start_year % 100 != 0) or start_year % 400 == 0:
                    if start_day > 29:
                        start_month += 1
                        start_day = 1
                else:
                    if start_day > 28:
                        start_month += 1
                        start_day = 1

            elif start_month == 12:
                if start_day > 31:
                    start_year += 1
                    start_month = 1
                    start_day = 1

            data_15 = {
                'diodval': 30,
                'reviseFlag': 30,
                'year': start_year,
                'month': start_month,
                'day': start_day,
                'diodGubun': 0,
                'searchType_min': 15,
            }

            data_30 = {
                'diodval': 30,
                'reviseFlag': 30,
                'year': start_year,
                'month': start_month,
                'day': start_day,
                'diodGubun': 0,
                'searchType_min': 30,
            }

            cur_logininfo = LoginInfo.objects.get(pk=crawl_num)

            if cur_logininfo.period == "15":
                usage_page = s.post('https://pccs.kepco.co.kr/iSmart/pccs/usage/getGlobalUsageStats.do', data=data_15)

            else:
                usage_page = s.post('https://pccs.kepco.co.kr/iSmart/pccs/usage/getGlobalUsageStats.do', data=data_30)

            soup = bs(usage_page.text, 'html.parser')
            # print(usage_page.content.decode("utf-8").strip())

            if cur_logininfo.period == "60":
                table1 = soup.find_all('div', {'class': 'hori_table1'})[0]
                table2 = soup.find_all('div', {'class': 'hori_table2'})[0]

            else:
                table1 = soup.find_all('div', {'class': 'hori_table1'})[1]
                table2 = soup.find_all('div', {'class': 'hori_table2'})[1]

            powerdata1 = table1.find_all('tr')
            powerdata2 = table2.find_all('tr')

            powerdata = powerdata1 + powerdata2

            result = []

            for data in powerdata:
                data_row = data.find_all('td')
                data_row = [x.text.strip() for x in data_row]
                if data_row:
                    item_obj = {
                        'time': data_row[0],
                        'usage': data_row[1],
                        'max_supply': data_row[2],
                        'lagging_power': data_row[3],
                        'leading_power': data_row[4],
                        'carbdiox': data_row[5],
                        'lagging_powerfactor': data_row[6],
                        'leading_powerfactor': data_row[7]
                    }
                    result.append(item_obj)

            for item in result:
                PowerData(crawl_num=crawl_num,
                          time=item['time'],
                          usage=item['usage'],
                          max_supply=item['max_supply'],
                          lagging_power=item['lagging_power'],
                          leading_power=item['leading_power'],
                          carbdiox=item['carbdiox'],
                          lagging_powerfactor=item['lagging_powerfactor'],
                          leading_powerfactor=item['leading_powerfactor']).save()

            start_day += 1

    cur_logininfo.status = "DONE"
    cur_logininfo.save()

    return None

